setwd("~/GitHub/FoMo/examples/1_fit_models")
library(tidyverse)
library(cmdstanr)
library(posterior)
# this script (or QMD) checks previously fitted models and assesses how well they fit
dataset <- "tagu2022cog"
folder <- paste0("scratch/models/", dataset, "/")
mode <- "train"
models <- unlist(dir(folder))
models <- models[str_detect(models, mode)]
d <- tibble()
for (model in models) {
m <- readRDS(paste0(folder, model))
vars <- m$metadata()$stan_variables
vars <- vars[!(vars %in% c("P", "Q", "z_u", "z_w", "u", "L_u", "log_lik"))]
vars <- vars[!str_detect(vars, "prior")]
# this is quite slow if we have many variables
rhat <- m$summary(variables = vars)$rhat
d <- bind_rows(d,
tibble(model = model, rhat = rhat))
}
d %>%
ggplot(aes(rhat)) +
geom_histogram(binwidth = 0.01) +
facet_wrap(~model, scales = "free") +
ggtitle("distribution of Rhat statistics")
View(d)
library(tidyverse)
library(cmdstanr)
library(patchwork)
source("../../functions/import_data.R")
source("../../functions/post_functions.R")
source("../../functions/plot_model.R")
d <- import_data("tagu2022cog")
m <- readRDS("../1_fit_models/scratch/models/tagu2022cog/test1_0.model")
# First of all, plot accuracy
pred <- extract_pred(m, d)
View(extract_pred)
m <- readRDS("../1_fit_models/scratch/models/tagu2022cog/train1_0.model")
# First of all, plot accuracy
pred <- extract_pred(m, d)
post <- extract_post(m, d)
post_plt <- plot_model_fixed(post)
post_plt
m <- readRDS("../1_fit_models/scratch/models/tagu2022cog/train1_3.model")
post <- extract_post(m, d)
post_plt <- plot_model_fixed(post)
post_plt
m <- readRDS("../1_fit_models/scratch/models/tagu2022cog/train1_0.model")
t <- readRDS("../1_fit_models/scratch/models/tagu2022cog/test1_0.model")
pred <- extract_pred(list(training = m, testing = t), d)
View(extract_pred)
m
t
t <- readRDS("../1_fit_models/scratch/models/tagu2022cog/test1_0.model")
t
pred <- extract_pred(list(training = m, testing = t), d)
library(tidyverse)
# This script reads evaluates model accuracy and computes summaries
# allowing us to compare human and model run statistics and inter-
# item selection vectors.
source("../../functions/import_data.R")
source("../../functions/compute_summary_stats.R")
source("../../functions/post_functions.R")
options(mc.cores = 4, digits = 2)
############################################################################
# datasets <- c("kristjansson2014plos", "tagu2022cog", "hughes2024rsos", "clarke2022qjep")
datasets <-"tagu2022cog"
############################################################################
get_models_in_dir <- function(folder, mode) {
models <- unlist(dir(folder))
models <- models[str_detect(models, mode)]
models <- str_extract(models, "1_[0-9]")
return(models)
}
extract_and_save_predictions <- function(dataset) {
# wrapper function for computing train/test accuracy for each version
# of FoMo for a given dataset
d <- import_data(dataset)
# get list of model versions to compute over
folder <- paste0("scratch/models/", dataset, "/")
mode <- "train"
models <- get_models_in_dir(folder, mode)
# create output folder
outfolder <- paste0("scratch/post/", dataset)
if(!dir.exists("scratch/post/")) {
dir.create("scratch/post/")
}
# create save folder if it doesn't yet exist
if(!dir.exists(outfolder)) {
dir.create(outfolder)
}
# read in models and extract post predictions
for (modelver in models)
{
print(paste("... model version ", modelver))
m <- readRDS(paste0("scratch/models/", dataset, "/train", modelver, ".model"))
t <- readRDS(paste0("scratch/models/", dataset, "/test", modelver, ".model"))
# get all model predictions
pred <- extract_pred(list(training = m, testing = t), d)
pred$dataset <- dataset
pred$model_ver <- modelver
# save
print("saving data")
saveRDS(pred, paste0(outfolder, "/pred_", mode, modelver, ".rds"))
# summarise accuracy and save
print("summarising accuracy....")
acc <- summarise_acc(pred)
write_csv(acc, paste0(outfolder, "/acc_", mode, modelver, ".csv"))
rm(m, t, pred)
}
}
compute_iisv_and_run_statistics <- function(dataset){
#####################################################
# Process empirical data first
d <- import_data(dataset)
# compute empirical run statistics
rl <- get_run_info_over_trials(d$found) %>%
group_by(person, condition) %>%
summarise(max_run_length = mean(max_run_length),
num_runs = mean(n_runs),
mean_bestr = mean(best_r),
mean_pao = mean(pao),
.groups = "drop") %>%
mutate(z = "observed")
# compute empirical run statistics
iisv <- get_iisv_over_trials(d$found) %>%
mutate(z = "observed")
# tidy up
rm(d)
# get list of model versions to compute over
folder <- paste0("scratch/models/", dataset, "/")
mode <- "train"
models <- get_models_in_dir(folder, mode)
# update folder to point to scratch/post
folder <- paste0("scratch/post/", dataset, "/")
for (modelver in models) {
# get simulation data for model
pred <- readRDS(paste0(folder, "pred_", mode, modelver, ".rds"))
pred <- pred$trialwise %>% filter(.draw == 1)
# compute simulated run statistics
rlp <- get_run_info_over_trials(pred) %>%
group_by(person, condition) %>%
summarise(max_run_length = mean(max_run_length),
num_runs = mean(n_runs),
mean_bestr = mean(best_r),
mean_pao = mean(pao),
.groups = "drop")
# compute simulated iisv statistics
#iisvp <- get_iisv_over_trials(pred)
# bind everything together
rl %>% bind_rows(rlp %>% mutate(z = paste0("v",  modelver))) -> rl
}
rl %>%
pivot_longer(c(max_run_length, num_runs, mean_bestr, mean_pao), names_to = "statistic") %>%
pivot_wider(names_from = z) -> rl
write_csv(rl, paste0(folder, "run_statistics.csv"))
}
############################################################################
# extract model predictions
############################################################################
for (ds in datasets) {
print(paste("Obtaining posterior predictions for dataset ", ds))
# first, extract and save accuracy
print("***** Computing accuracy *****")
extract_and_save_predictions(ds)
print("***** Computing iisv and run statistics *****")
compute_iisv_and_run_statistics(ds)
}
t <- readRDS("../1_fit_models/scratch/models/tagu2022cog/test1_0.model")
t
m <- list(training = m, testing = t)
View(m)
mode <- "train_test"
mtr <- m$training
mte <- m$testing
vars <- mtr$metadata()$stan_variables
pvars <- vars[str_detect(vars, "^P")]
get_sim = ("Q" %in% vars)
# determine if m is a multi-level model or not
multi_level <- ("z_u" %in% vars)
if (mode == "train_test") {
# get the training/test data split
dtt <- get_train_test_split(d)
training <- dtt$training
testing <- dtt$testing
rm(dtt)
# get training set predictions
pred_tr <- extract_item_pred(mtr, training, pvars) %>% mutate(split = "training")
# now we also need to get the test set predictions
pred_te <- extract_item_pred(mte, testing, pvars) %>% mutate(split = "testing")
pred <- bind_rows(pred_tr,pred_te)
rm(pred_tr, pred_te)
} else {
# get training set predictions
pred <- extract_item_pred(mtr, d, pvars)
}
list_out <- list(acc = pred)
pred <- extract_pred(list(training = m, testing = t), d)
m <- readRDS("../1_fit_models/scratch/models/tagu2022cog/train1_0.model")
t <- readRDS("../1_fit_models/scratch/models/tagu2022cog/test1_0.model")
pred <- extract_pred(list(training = m, testing = t), d)
sim <- extract_trial_pred(mte, testing$stim)
mte
m <- list(training = m, testing = t)
t
t <- readRDS("../1_fit_models/scratch/models/tagu2022cog/test1_0.model")
t$summary
t$summary()
?generate_quantities
m <- mte
m$draws()
?draws
m$draws_df()
m$draws(format = "df")
m$draws(format = "df") %>% sample_n(2)
m <- readRDS("../1_fit_models/scratch/models/tagu2022cog/train1_0.model")
m$draws(format = "df") %>% sample_n(2)
d_list <- get_list(dataset, mode, "testing")
get_list <- function(dataset, mode, stage) {
if (class(dataset) == "character") {
# if we provide a dataset label, load a precomputed d_list
dlist_folder <- paste0("scratch/d_list/", dataset, "/")
if (mode == "all") {
d_list <- readRDS(paste0(dlist_folder, "all.rds"))
} else {
# load either training or testing dlist
if (stage == "training") {
d_list <- readRDS(paste0(dlist_folder, "train.rds"))
} else {
d_list <- readRDS(paste0(dlist_folder, "test.rds"))
}
}
} else {
# otherwise... compute d_list from scratch
if (mode == "all") {
d_list <- prep_data_for_stan(d)
} else {
d_list <- prep_train_test_data_for_stan(d)
if (stage == "training") {
d_list = d_list$training
} else {
d_list = d_list$testing
}
}
}
}
d_list <- get_list(dataset, mode, "testing")
# although we aren't using the priors, the model still
# expects them to be in the input
d_list  <- add_priors_to_d_list(d_list, modelver = fomo_ver, model_path = model_path)
source("../../functions/prep_data.R")
# although we aren't using the priors, the model still
# expects them to be in the input
d_list  <- add_priors_to_d_list(d_list, modelver = fomo_ver, model_path = model_path)
fomo_ver "1.0"
fomo_ver <- "1.0"
# although we aren't using the priors, the model still
# expects them to be in the input
d_list  <- add_priors_to_d_list(d_list, modelver = fomo_ver, model_path = model_path)
model_path <- "../"
for (ii in 1:3) {
if ("models" %in% dir(model_path)) {
model_path <- paste0(model_path, "models/")
break
} else {
model_path <- paste0(model_path, "../")
}
}
# although we aren't using the priors, the model still
# expects them to be in the input
d_list  <- add_priors_to_d_list(d_list, modelver = fomo_ver, model_path = model_path)
m_test <- mod$generate_quantities(m$draws(format = "df") %>% sample_n(2),
data = d_list, seed = 123)
mod <- cmdstan_model(paste0(model_path, "multi_level/FoMo", fomo_ver_str, ".stan"))
# load in the Stan model
fomo_ver_str <- str_replace(fomo_ver, "\\.", "_" )
mod <- cmdstan_model(paste0(model_path, "multi_level/FoMo", fomo_ver_str, ".stan"))
m_test <- mod$generate_quantities(m$draws(format = "df") %>% sample_n(2),
data = d_list, seed = 123)
m_test <- mod$generate_quantities(m$draws() %>% sample_n(2),
data = d_list, seed = 123)
as_draws_matrix(m$draws())
as_draws_matrix(m$draws()) %>% sample_n(2)
as_draws_matrix(m$draws())[1,]
m_test <- mod$generate_quantities(as_draws_matrix(m$draws())[1,],
data = d_list, seed = 123)
filename <- paste0("scratch/models/", dataset_name, "/test", fomo_ver_str, ".model")
# get dataset name
dataset_name <- get_dataset_name(dataset)
get_dataset_name <- function(ds) {
# as ds can either be a string (pointing to a dataset name) or
# an actual list-dataset, we better sort that out
if (class(ds) == "list") {
ds_name <- ds$name
} else {
ds_name <- ds
}
return(ds_name)
}
filename <- paste0("scratch/models/", dataset_name, "/test", fomo_ver_str, ".model")
# get dataset name
dataset_name <- get_dataset_name(dataset)
filename <- paste0("scratch/models/", dataset_name, "/test", fomo_ver_str, ".model")
m_test$save_object(filename)
library(tidyverse)
library(cmdstanr)
library(patchwork)
library(tidybayes)
source("../functions/import_data.R")
setwd("~/GitHub/FoMo/examples")
library(tidyverse)
library(cmdstanr)
library(patchwork)
library(tidybayes)
source("../functions/import_data.R")
source("../functions/prep_data.R")
source("../functions/compute_summary_stats.R")
source("../functions/plot_model.R")
source("../functions/plot_data.R")
source("../functions/post_functions.R")
source("../functions/sim_foraging_data.R")
options(mc.cores = 1, digits = 2)
# set global ggplot theme
theme_set(theme_bw())
model_ver <- "1_3"
dataset <- "tagu2022cog"
# read in data
d <- import_data(dataset)
sf <- "1_fit_models/scratch"
folder <- paste0(sf, "/post/", dataset, "/")
m <- readRDS(paste0("1_fit_models/scratch/models/", dataset, "/train", model_ver, ".model"))
post <- extract_post(m, d)
post_plt <- plot_model_fixed(post)
post_plt
plot_model_theta(post, nrow = 2)
plot_model_theta(post, per_person = TRUE, nrow = 10)
plot_model_theta(post, per_person = TRUE, nrow = 5)
m$summary()
m$summary(variables = "theta")
m$summary(variables = "log_theta")
vars <- m$metadata()$stan_variables
vars <- vars[!(vars %in% c("P", "Q", "z_u", "z_w", "u", "L_u", "log_lik"))]
vars <- vars[!str_detect(vars, "prior")]
# this is quite slow if we have many variables
rhat <- m$summary(variables = vars)$rhat
rhat
hist(rhat)
rhat <- m$summary(variables = "z_u")$rhat
hist(rhat)
rhat <- m$summary(variables = "z_w")$rhat
hist(rhat)
rhat <- m$summary(variables = "z_u")$rhat
vars <- m$metadata()$stan_variables
vars <- vars[!(vars %in% c("P", "Q"))]
vars <- vars[!str_detect(vars, "prior")]
# this is quite slow if we have many variables
rhat <- m$summary(variables = vars)$rhat
vars <- m$metadata()$stan_variables
vars <- vars[!(vars %in% c("P", "Q", "loglik"))]
vars <- m$metadata()$stan_variables
vars <- vars[!(vars %in% c("P", "Q", "log_lik"))]
vars
vars <- vars[!str_detect(vars, "prior")]
vars
# this is quite slow if we have many variables
rhat <- m$summary(variables = vars)$rhat
hist(rhat)
m$summary(variables = vars)
m$summary(variables = "log_theta")
m$summary(variables = "u_log_theta")
vars <- vars[!(vars %in% c("P", "Q", "z_u", "z_w", "u", "L_u", "log_lik"))]
vars <- m$metadata()$stan_variables
vars <- vars[!(vars %in% c("P", "Q", "z_u", "z_w", "u", "L_u", "log_lik"))]
vars <- vars[!str_detect(vars, "prior")]
m$summary(variables = vars)
qlogis(2)
plogis(2)
plogis(3)
