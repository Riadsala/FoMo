---
title: "4: A model report"
format: 
  html:
    fig-height: 3
editor: source
---

```{r, message=FALSE, warning = FALSE}
library(tidyverse)
library(cmdstanr)

source("../../functions/import_data.R")
source("../../functions/prep_data.R")
source("../../functions/compute_summary_stats.R")
source("../../functions/plot_model.R")
source("../../functions/plot_data.R")
source("../../functions/post_functions.R")
source("../../functions/sim_foraging_data.R")

options(mc.cores = 1, digits = 2)

# set global ggplot theme
theme_set(ggthemes::theme_tufte())
```

these are fit by script `fit_all_models.R` and run on our cluster/big-chungus.

We then compute accuracy for each model using script `2_`

Here we provide more in depth analysis on how well a particular model fits a given dataset


```{r}
model_ver <- "1_0"
# dataset   <- "kristjansson2014plos"
dataset <- "clarke2022qjep"
```


```{r}
# read in data
d <- import_data(dataset)

# read in model and predictions for test data
m <- read_rds(paste0("scratch/", dataset, "_train_", model_ver, ".model"))
t <- read_rds(paste0("scratch/", dataset, "_test_", model_ver, ".model"))
```

# How well does the model fit?

## Prediction Accuracy

Compute chance base-rates for each dataset

```{r}
d$stim %>% group_by(person, trial) %>%
  summarise(n = n(), .groups = "drop") -> dn
  
items <- seq(1, unique(dn$n))
items_left <- unique(dn$n) - items + 1
  
n_conditions <- length(levels(d$stim$condition))
  
baseline <- tibble(found = 1:unique(dn$n),
                   accuracy = (1/items_left))
  
rm(items, items_left)
```

```{r}
#| label: compute-all_acc
#| cache: true

pred <- summarise_postpred(list(training = m, testing = t), d, 
                                 get_sim = FALSE, draw_sample_frac=0.025)
acc <- compute_acc(pred$acc)

acc %>% ggplot(aes(found, accuracy)) +
  geom_lineribbon(aes(fill = condition, colour = condition,
                     ymin = .lower, ymax = .upper,
                  group = interaction(condition, .width)), 
                  alpha = 0.5) +
  geom_path(data = baseline, linetype = 2, colour = "black") +
  facet_grid(.~split) +
  scale_color_viridis_d() + 
  scale_fill_viridis_d()
```

## ELPD? 

# Model checking

Did the mcmc sampling work ok? 

```{r}

# diagnostic checks
# m$diagnostic_summary()
# 
# traceplots
 # bayesplot::mcmc_trace(m$draws(),
 #                      pars = c("b_a[1]", "b_a[2]", "b_stick[1]", "b_stick[2]", 
 #                                "rho_delta[1]", "rho_delta[2]"),  #, "rho_psi[1]", "rho_psi[2]"
 #                      facet_args = list(nrow = 2))
```


# Posterior Densities

```{r}
#| warning: false
#| echo: false

post <- extract_post(m, d)
plot_model_fixed(post)
```

# Posterior Predictions

Compare run statistics and inter-item-selection-vectors.

```{r}
read_csv(paste0("scratch/run_statistics", model_ver, ".csv"),
         show_col_types = FALSE) %>%
  filter(dataset == {{dataset}}) %>%
  ggplot(aes(observed, predicted, colour = condition))  +
  geom_point(alpha = 0.5) +
  geom_abline(linetype = 2) +
  scale_x_continuous("observed longest run") + 
  scale_y_continuous("predicted longest run")+
  ggthemes::scale_color_ptol() -> plt_rl
```

```{r}

iisv <- read_csv(paste0("scratch/iisv_statistics", model_ver, ".csv"),
                 show_col_types = FALSE) %>%
  filter(dataset == {{dataset}})

```

```{r}
iisv  %>%
  mutate(d = sqrt(d2)) %>%
  group_by(condition, found, x) %>%
  # median_hdci(d, .width = c(0.53, 0.97)) %>%
  ggplot(aes(d,
             fill = x))  +
  # geom_path(aes(colour = x)) +
  geom_histogram(position = position_identity(), alpha = 0.5) + 
  # geom_ribbon(alpha = 0.33) +
  facet_wrap(condition ~ .) +
  scale_fill_viridis_d(option = "cividis") + 
  theme(legend.title = element_blank()) -> plt_iisv_delta
```



## Absolute directions

```{r}
plot_rose(iisv, fl = "x", binsize = 7.5) + facet_wrap(~condition) +
  theme(legend.position = "none") -> plt_rose

plt_rose
```

Glue figures together

```{r}
plt_rl <- plt_rl + plt_rl + plot_layout(guides = "collect")

plt_prox <-  plt_iisv_delta / plt_rose + plot_layout(guides = "collect", heights = c(1, 2))

ggsave( "post_pred_summary.pdf", (plt_rl / plt_prox) + plot_layout(heights = c(1, 3)), width = 5, height = 6)
```


## Params correlate with summary statistics?

### IISV delta2

```{r}

post$random %>% 
  select(-.draw) %>%
  pivot_longer(-c(person, condition), names_to = "param", values_to = "value") %>%
  group_by(person, condition, param) %>%
  median_hdci(value, .width = 0.97) %>%
  select(-.point, -.interval) -> u_hpdi

iisv %>%
  filter(x == "human", dataset == {{dataset}}) %>%
  group_by(person, condition, .draw) %>%
  summarise(d2 = mean(d2, na.rm = T), .groups = "drop_last") %>%
  median_hdci(d2, .width = 0.97)%>%
  select(-.point, -.interval) -> d2_hpdi

right_join(u_hpdi, d2_hpdi, by = join_by(person, condition, .width)) -> d2_hpdi

d2_hpdi %>% 
  filter(param == "u_delta" ) %>%
  ggplot(aes(value, y = d2,
                       xmin = .lower.x, xmax = .upper.x, 
                       ymin = .lower.y, ymax = .upper.y, 
                       colour = condition)) + 
  geom_point() +
  geom_errorbar(alpha = 0.5) + 
  geom_errorbarh(alpha = 0.5) +
  scale_x_continuous("rho_delta") + 
  scale_y_continuous("mean delta^2: iisv (human)") -> plt_human

iisv %>%
  filter(x == "model", dataset == {{dataset}}) %>%
  group_by(person, condition, .draw) %>%
  summarise(d2 = mean(d2, na.rm = T), .groups = "drop_last") %>%
  median_hdci(d2, .width = 0.97)%>%
  select(-.point, -.interval) -> d2_hpdi

right_join(u_hpdi, d2_hpdi, by = join_by(person, condition, .width)) -> d2_hpdi

d2_hpdi %>% 
  filter(param == "u_delta" ) %>%
  ggplot(aes(value, y = d2,
                       xmin = .lower.x, xmax = .upper.x, 
                       ymin = .lower.y, ymax = .upper.y, 
                       colour = condition)) + 
  geom_point() +
  geom_errorbar(alpha = 0.5) + 
  geom_errorbarh(alpha = 0.5) +
  scale_x_continuous("rho_delta") + 
  scale_y_continuous("mean delta^2: iisv (model)") -> plt_model

plt_human + plt_model

```

### Run statistics

```{r}

```





